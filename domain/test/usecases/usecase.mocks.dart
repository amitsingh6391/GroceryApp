// Mocks generated by Mockito 5.4.0 from annotations
// in domain/test/usecases/usecase.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:domain/models/account_details_model.dart' as _i2;
import 'package:domain/models/cart_model.dart' as _i7;
import 'package:domain/models/order_model.dart' as _i5;
import 'package:domain/models/product_model.dart' as _i6;
import 'package:domain/repository/firebase_repository.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAccountDetails_0 extends _i1.SmartFake
    implements _i2.AccountDetails {
  _FakeAccountDetails_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAddress_1 extends _i1.SmartFake implements _i2.Address {
  _FakeAddress_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FirebaseRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseRepository extends _i1.Mock
    implements _i3.FirebaseRepository {
  MockFirebaseRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.AccountDetails> fetchUserDetails() => (super.noSuchMethod(
        Invocation.method(
          #fetchUserDetails,
          [],
        ),
        returnValue: _i4.Future<_i2.AccountDetails>.value(_FakeAccountDetails_0(
          this,
          Invocation.method(
            #fetchUserDetails,
            [],
          ),
        )),
      ) as _i4.Future<_i2.AccountDetails>);
  @override
  _i4.Future<void> addUserDetails(_i2.AccountDetails? accountDetails) =>
      (super.noSuchMethod(
        Invocation.method(
          #addUserDetails,
          [accountDetails],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<List<_i5.Order>> getAllOrders() => (super.noSuchMethod(
        Invocation.method(
          #getAllOrders,
          [],
        ),
        returnValue: _i4.Future<List<_i5.Order>>.value(<_i5.Order>[]),
      ) as _i4.Future<List<_i5.Order>>);
  @override
  _i4.Future<List<_i6.Product>> getAllProducts({
    String? condition,
    required bool? all,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllProducts,
          [],
          {
            #condition: condition,
            #all: all,
          },
        ),
        returnValue: _i4.Future<List<_i6.Product>>.value(<_i6.Product>[]),
      ) as _i4.Future<List<_i6.Product>>);
  @override
  _i4.Stream<List<_i7.Cart>> listenToCart() => (super.noSuchMethod(
        Invocation.method(
          #listenToCart,
          [],
        ),
        returnValue: _i4.Stream<List<_i7.Cart>>.empty(),
      ) as _i4.Stream<List<_i7.Cart>>);
  @override
  _i4.Future<void> placeOrder(_i5.Order? order) => (super.noSuchMethod(
        Invocation.method(
          #placeOrder,
          [order],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<List<_i6.Product>> searchProducts(String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchProducts,
          [query],
        ),
        returnValue: _i4.Future<List<_i6.Product>>.value(<_i6.Product>[]),
      ) as _i4.Future<List<_i6.Product>>);
  @override
  _i4.Stream<_i2.AccountDetails> streamUserDetails() => (super.noSuchMethod(
        Invocation.method(
          #streamUserDetails,
          [],
        ),
        returnValue: _i4.Stream<_i2.AccountDetails>.empty(),
      ) as _i4.Stream<_i2.AccountDetails>);
  @override
  _i4.Future<void> addProductToCart(_i7.Cart? cart) => (super.noSuchMethod(
        Invocation.method(
          #addProductToCart,
          [cart],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<void> delProductFromCart(String? productId) => (super.noSuchMethod(
        Invocation.method(
          #delProductFromCart,
          [productId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<int> checkItemInCart(String? productId) => (super.noSuchMethod(
        Invocation.method(
          #checkItemInCart,
          [productId],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);
  @override
  _i4.Future<bool> checkUserDetail() => (super.noSuchMethod(
        Invocation.method(
          #checkUserDetail,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
  @override
  _i4.Future<void> logoutUser() => (super.noSuchMethod(
        Invocation.method(
          #logoutUser,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<void> setAccountDetails({
    String? displayName,
    String? photoUrl,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setAccountDetails,
          [],
          {
            #displayName: displayName,
            #photoUrl: photoUrl,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<bool> sendCode(
    String? phoneNumber,
    void Function(String)? onError,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendCode,
          [
            phoneNumber,
            onError,
          ],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
  @override
  _i4.Future<void> loginWithOtp(
    String? smsCode,
    void Function(String)? onError,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #loginWithOtp,
          [
            smsCode,
            onError,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [Cart].
///
/// See the documentation for Mockito's code generation for more information.
class MockCart extends _i1.Mock implements _i7.Cart {
  MockCart() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get productId => (super.noSuchMethod(
        Invocation.getter(#productId),
        returnValue: '',
      ) as String);
  @override
  set productId(String? _productId) => super.noSuchMethod(
        Invocation.setter(
          #productId,
          _productId,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get image => (super.noSuchMethod(
        Invocation.getter(#image),
        returnValue: '',
      ) as String);
  @override
  set image(String? _image) => super.noSuchMethod(
        Invocation.setter(
          #image,
          _image,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: '',
      ) as String);
  @override
  set name(String? _name) => super.noSuchMethod(
        Invocation.setter(
          #name,
          _name,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get unit => (super.noSuchMethod(
        Invocation.getter(#unit),
        returnValue: '',
      ) as String);
  @override
  set unit(String? _unit) => super.noSuchMethod(
        Invocation.setter(
          #unit,
          _unit,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get currency => (super.noSuchMethod(
        Invocation.getter(#currency),
        returnValue: '',
      ) as String);
  @override
  set currency(String? _currency) => super.noSuchMethod(
        Invocation.setter(
          #currency,
          _currency,
        ),
        returnValueForMissingStub: null,
      );
  @override
  num get currentPrice => (super.noSuchMethod(
        Invocation.getter(#currentPrice),
        returnValue: 0,
      ) as num);
  @override
  set currentPrice(num? _currentPrice) => super.noSuchMethod(
        Invocation.setter(
          #currentPrice,
          _currentPrice,
        ),
        returnValueForMissingStub: null,
      );
  @override
  num get quantityPerUnit => (super.noSuchMethod(
        Invocation.getter(#quantityPerUnit),
        returnValue: 0,
      ) as num);
  @override
  set quantityPerUnit(num? _quantityPerUnit) => super.noSuchMethod(
        Invocation.setter(
          #quantityPerUnit,
          _quantityPerUnit,
        ),
        returnValueForMissingStub: null,
      );
  @override
  int get numOfItems => (super.noSuchMethod(
        Invocation.getter(#numOfItems),
        returnValue: 0,
      ) as int);
  @override
  set numOfItems(int? _numOfItems) => super.noSuchMethod(
        Invocation.setter(
          #numOfItems,
          _numOfItems,
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AccountDetails].
///
/// See the documentation for Mockito's code generation for more information.
class MockAccountDetails extends _i1.Mock implements _i2.AccountDetails {
  MockAccountDetails() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: '',
      ) as String);
  @override
  set name(String? _name) => super.noSuchMethod(
        Invocation.setter(
          #name,
          _name,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set phoneNumber(String? _phoneNumber) => super.noSuchMethod(
        Invocation.setter(
          #phoneNumber,
          _phoneNumber,
        ),
        returnValueForMissingStub: null,
      );
  @override
  List<_i2.Address> get addresses => (super.noSuchMethod(
        Invocation.getter(#addresses),
        returnValue: <_i2.Address>[],
      ) as List<_i2.Address>);
  @override
  set addresses(List<_i2.Address>? _addresses) => super.noSuchMethod(
        Invocation.setter(
          #addresses,
          _addresses,
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [Order].
///
/// See the documentation for Mockito's code generation for more information.
class MockOrder extends _i1.Mock implements _i5.Order {
  MockOrder() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get orderId => (super.noSuchMethod(
        Invocation.getter(#orderId),
        returnValue: '',
      ) as String);
  @override
  set orderId(String? _orderId) => super.noSuchMethod(
        Invocation.setter(
          #orderId,
          _orderId,
        ),
        returnValueForMissingStub: null,
      );
  @override
  num get price => (super.noSuchMethod(
        Invocation.getter(#price),
        returnValue: 0,
      ) as num);
  @override
  set price(num? _price) => super.noSuchMethod(
        Invocation.setter(
          #price,
          _price,
        ),
        returnValueForMissingStub: null,
      );
  @override
  List<_i5.OrderItem> get orderItems => (super.noSuchMethod(
        Invocation.getter(#orderItems),
        returnValue: <_i5.OrderItem>[],
      ) as List<_i5.OrderItem>);
  @override
  set orderItems(List<_i5.OrderItem>? _orderItems) => super.noSuchMethod(
        Invocation.setter(
          #orderItems,
          _orderItems,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get orderedAt => (super.noSuchMethod(
        Invocation.getter(#orderedAt),
        returnValue: '',
      ) as String);
  @override
  set orderedAt(String? _orderedAt) => super.noSuchMethod(
        Invocation.setter(
          #orderedAt,
          _orderedAt,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get orderStatus => (super.noSuchMethod(
        Invocation.getter(#orderStatus),
        returnValue: '',
      ) as String);
  @override
  set orderStatus(String? _orderStatus) => super.noSuchMethod(
        Invocation.setter(
          #orderStatus,
          _orderStatus,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get currency => (super.noSuchMethod(
        Invocation.getter(#currency),
        returnValue: '',
      ) as String);
  @override
  set currency(String? _currency) => super.noSuchMethod(
        Invocation.setter(
          #currency,
          _currency,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get paymentId => (super.noSuchMethod(
        Invocation.getter(#paymentId),
        returnValue: '',
      ) as String);
  @override
  set paymentId(String? _paymentId) => super.noSuchMethod(
        Invocation.setter(
          #paymentId,
          _paymentId,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get signature => (super.noSuchMethod(
        Invocation.getter(#signature),
        returnValue: '',
      ) as String);
  @override
  set signature(String? _signature) => super.noSuchMethod(
        Invocation.setter(
          #signature,
          _signature,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.Address get orderAddress => (super.noSuchMethod(
        Invocation.getter(#orderAddress),
        returnValue: _FakeAddress_1(
          this,
          Invocation.getter(#orderAddress),
        ),
      ) as _i2.Address);
  @override
  set orderAddress(_i2.Address? _orderAddress) => super.noSuchMethod(
        Invocation.setter(
          #orderAddress,
          _orderAddress,
        ),
        returnValueForMissingStub: null,
      );
}
